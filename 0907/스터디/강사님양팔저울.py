def DFS(cnt, left, right, mem):
 
    # 현재 양팔저울의 상태를 mem 으로 나타냄
    # 현재 상태에서 가능한 경우의 수를 계산한 적이 있으면 다시 계산하지 않음
    if dp[mem] > 0:
        return dp[mem]
 
    # 모든 추를 사용한 경우
    if cnt == N:
        # 왼쪽의 무게가 오른쪽보다 크거나 같은 경우
        if left >= right:  
            # 가능한 경우이므로 1추가
            return 1  
        # 불가능한 경우는 0추가
        return 0 
 
    # 가능한 경우의 수 세기
    count = 0
    # 모든 추에 대해 고려해보기
    for i in range(N):
        # i번 추를 이미 사용한 경우는 넘어감
        if visit[i] == 1:
            continue
 
        # i번 추를 사용한다고 표시
        visit[i] = 1
 
        # i번 추를 사용하고, 현재 상태를 갱신하고 다음 단계로 넘어감
 
        # mem 값을 통해 현재 저울의 상태를 나타냄
        # 0번 추를 아직 사용하지 않은 경우 => mem += mul[0] * 0
        # 0번 추를 왼쪽 저울에 사용한 경우 => mem += mul[0] * 1
        # 0번 추를 오른쪽 저울에 사용한 경우 => mem += mul[0] * 2
        # 이렇게 3개의 상태를 3진법으로 나타내야 하므로 3의 거듭제곱 사용
 
        # ex) mem = 5 일때
        # 3 + 2 
        # 3^1 * 1 + 3^0 * 2
        # 1번추는 왼쪽에, 0번 추는 오른쪽에 놓았음, 나머지 추는 사용 안했음
 
        # i번 추를 왼쪽에 놓을때
        count += DFS(cnt + 1, left + S[i], right, mem + mul[i] * 1)
 
        # i번 추를 오른쪽에 놓을때는 왼쪽의 무게보다 크지 않아야 가능함
        if right + S[i] <= left:
            count += DFS(
                cnt + 1, left, right + S[i], mem + mul[i] * 2
            )
 
        # i번 추를 사용한 경우의수 고려 완료, 사용해제
        visit[i] = 0
 
    dp[mem] = count  # 결과 저장
    return dp[mem]  # 결과 반환
 
 
T = int(input())
mul = [3**i for i in range(10)]  # 3의 거듭제곱을 나타내는 리스트
# 3의 거듭제곱을 일종의 해시값 처럼 사용
# mul[0] => 0번 추의 상태를 나타냄
# 0번추를 왼쪽에 놓는다 : mul[0] * 1, 0번추를 오른쪽에 놓는다 : mul[0] * 2, 0번추를 놓지 않는다 : mul[0] * 0
# mul[1] => 1번 추의 상태를 나타냄
# 1번추를 왼쪽에 놓는다 : mul[1] * 1, 0번추를 오른쪽에 놓는다 : mul[1] * 2, 0번추를 놓지 않는다 : mul[1] * 0
# 이 mul 배열의 원소들을 곱해서 합한 결과를 추의 상태로 사용 
 
for tc in range(1, T + 1):
    N = int(input())  # 추의 개수 입력
    S = list(map(int, input().split()))  # 추의 무게 입력
    dp = [0] * (3**N)  # 결과를 저장할 DP 테이블 초기화, 추를 놓은 상태는 추 한개당 놓지않음,왼쪽에놓음,오른쪽에놓음 3가지 => 3^N
    # dp[i] : 추를 놓은 상태를 삼진수 i 로 나타냈을때 가능한 경우를 나타냄
    visit = [0] * 11  # 추를 사용한 여부를 나타내는 배열 초기화
    ans = DFS(0, 0, 0, 0)  # DFS 호출하여 답 계산
    print(f"#{tc} {ans}")  # 결과 출력